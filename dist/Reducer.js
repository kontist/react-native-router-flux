Object.defineProperty(exports,"__esModule",{value:true});exports.default=createReducer;var _lodash=_interopRequireDefault(require("lodash"));var _reactNavigation=require("react-navigation");var ActionConst=_interopRequireWildcard(require("./ActionConst"));var _State=require("./State");function _getRequireWildcardCache(){if(typeof WeakMap!=="function")return null;var cache=new WeakMap();_getRequireWildcardCache=function _getRequireWildcardCache(){return cache;};return cache;}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj};}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function createReducer(store){return function(state,action){var NavigationStore=require('./Store').default;var navigationStore=store||new NavigationStore();var type=action.type,routeName=action.routeName;if(type===ActionConst.POP_TO){var nextScene='';var newState=state;var currentState=state;while(newState&&nextScene!==routeName){newState=navigationStore.getStateForAction(_reactNavigation.StackActions.pop(),currentState);if(newState){nextScene=(0,_State.getActiveState)(newState).routeName;if(nextScene!==routeName&&_lodash.default.isEqual(currentState,newState)){console.warn("popTo called with an unknown routeName: "+routeName+", current scene: "+nextScene);break;}if(nextScene!==routeName){currentState=newState;}}}return nextScene===routeName?newState:state;}if(type===ActionConst.REPLACE){var _newState=navigationStore.getStateForAction(_reactNavigation.NavigationActions.navigate({routeName:routeName,params:action.params}),state);var res=(0,_State.popPrevious)(_newState,routeName);return res;}return navigationStore.getStateForAction(action,state)||state;};}