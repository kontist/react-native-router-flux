Object.defineProperty(exports,"__esModule",{value:true});exports.getActiveStateExceptDrawer=getActiveStateExceptDrawer;exports.isActiveRoute=isActiveRoute;exports.getRouteNameByKey=getRouteNameByKey;exports.getActiveState=getActiveState;exports.getParent=getParent;exports.inject=inject;exports.popPrevious=popPrevious;function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_nonIterableSpread();}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance");}function _iterableToArray(iter){if((typeof Symbol==="function"?Symbol.iterator:"@@iterator")in Object(iter)||Object.prototype.toString.call(iter)==="[object Arguments]")return Array.from(iter);}function _arrayWithoutHoles(arr){if(Array.isArray(arr)){for(var i=0,arr2=new Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};var ownKeys=Object.keys(Object(source));if(typeof Object.getOwnPropertySymbols==='function'){ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable;}));}ownKeys.forEach(function(key){_defineProperty(target,key,source[key]);});}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function getActiveStateExceptDrawer(param){var state=param;if(!state.routes){return state;}if(state.routes[state.index].routeName==='DrawerOpen'){return getActiveState(state.routes[0]);}return getActiveState(state.routes[state.index]);}function isActiveRoute(state,routeName){if(state.routeName===routeName){return true;}if(!state.routes){return state.routeName===routeName;}if(state.routes[state.index].routeName==='DrawerOpen'){return isActiveRoute(state.routes[0],routeName);}return isActiveRoute(state.routes[state.index],routeName);}function getRouteNameByKey(state,key){if(state.key===key){return state.routeName;}if(!state.routes){return state.routeName;}if(state.routes[state.index].key===key){return state.routes[state.index].routeName;}return getRouteNameByKey(state.routes[state.index],key);}function getActiveState(param,parent){var state=param;if(!state.routes){return _objectSpread({},state,{parent:parent});}return getActiveState(state.routes[state.index],_objectSpread({},state,{parent:parent}));}function getParent(state,routeName,parent){if(state.routeName===routeName){return parent;}if(!state.routes){return null;}for(var i=0;i<state.routes.length;i+=1){var res=getParent(state.routes[i],routeName,state);if(res){return res;}}return null;}function inject(state,key,index,routes){if(!state.routes){return state;}if(state.key===key){if(routes){return _objectSpread({},state,{routes:routes,index:index});}return _objectSpread({},state,{index:index});}return _objectSpread({},state,{routes:state.routes.map(function(x){return inject(x,key,index,routes);})});}function popPrevious(state,routeName){var parent=getParent(state,routeName);var key=parent.key,index=parent.index;if(index){var routes=_toConsumableArray(parent.routes.slice(0,index-1)).concat(_toConsumableArray(parent.routes.slice(index)));var newState=inject(state,key,index-1,routes);return newState;}return state;}